"""
hurdat2parser 2.3.0.1, Copyright (c) 2024, Kyle S. Gentry

MIT License

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""

import collections
import math

from . import _calculations

class Coordinate(collections.namedtuple("Coordinate", ["lon", "lat"])):
    """
    Simple class that allows x and y as aliases of longitude (lon) and latitude
    (lat). Represents a point in a cartesian plane.
    """
    @property
    def x(self):
        return self.lon

    @property
    def y(self):
        return self.lat

class BoundingBox(collections.namedtuple("BoundingBox", ["p1", "p2"])):
    """
    A box (rectangle) whose extents are defined from two points (coordinates)
    in space.

    An alternate (and maybe more preferable) way to name (or at least think of) this class would be Segment, as two points also make a line.

    Arguments must be of type <Coordinate>
    """

    def __repr__(self):
        return str({
            k:v
            for k, v in list(self._asdict().items()) + [
            
            ]
        })

    def __contains__(self, point):
        if not isinstance(point, Coordinate):
            point = Coordinate(*point)
        return (
            self.w <= point.lon <= self.e
        ) and (
            self.s <= point.lat <= self.n
        )

    @property
    def area(self):
        """The width * height of the box"""
        return abs(self.delta_lon * self.delta_lat)

    @property
    def delta_lon(self):
        """The change in longitude (x)."""
        return self.p2.lon - self.p1.lon

    @property
    def delta_x(self):
        """The change in longitude (x)."""
        return self.delta_lon

    @property
    def delta_lat(self):
        """The change in latitude (y)."""
        return self.p2.lat - self.p1.lat

    @property
    def delta_y(self):
        """The change in latitude (y)."""
        return self.delta_lat

    @property
    def hypotenuse(self):
        """
        The length of the segment made of the two defined Bounding
        Box points.
        """
        return math.hypot(self.delta_lat, self.delta_lon)

    @property
    def length(self):
        """
        The length of the segment (in degrees) made of the two defined Bounding
        Box points.
        """
        return self.hypotenuse

    @property
    def theta(self):
        """The angle made by the bounding-box defined points."""
        return math.degrees(
            math.atan2(self.delta_lat, self.delta_lon)
        )

    @property
    def heading(self):
        """
        The vector direction (navigational; 0 = North) of the bounding-box
        segment in degrees (0-360).
        """
        return _calculations.direction(
            self.p1.lat, self.p1.lon,
            self.p2.lat, self.p2.lon,
        )

    def intersects(self, otherbb):
        """
        Returns whether or not this bounding box shares space with another
        bounding box.

        Arguments:
            otherbb: The other bounding box needed for comparison
        """
        if (
            otherbb.s <= self.s <= otherbb.n
            or otherbb.s <= self.n <= otherbb.n
            or self.s <= otherbb.s <= self.n
            or self.s <= otherbb.n <= self.n
        ) and (
            otherbb.w <= self.w <= otherbb.e
            or otherbb.w <= self.e <= otherbb.e
            or self.w <= otherbb.w <= self.e
            or self.w <= otherbb.e <= self.e
        ):
            return True
        return False

    def rotate(self, deg, rpoint=None):
        """
        Rotates the <BoundingBox> (or segment) by a requested angle (in 
        degrees) with respect to an optionally-requested origin or rotational
        point. It then returns a new <BoundingBox> instance.

        Arguments
        ---------
            deg: the angle shift in degrees

        Default Arguments
        -----------------
            rpoint (None): If nothing is passed, the center of the
                <BoundingBox> is used as the rotational point. If one would
                want a different point to rotate about, pass it in (x, y)
                tuple form
        """
        if rpoint is None:
            rpoint = Coordinate(*self.center)
        else:
            rpoint = Coordinate(*rpoint)

        # print(rpoint, self, self.center)
        theta = math.radians(self.theta + deg)
        dx = math.cos(theta) * self.hypotenuse
        dy = math.sin(theta) * self.hypotenuse
        
        return BoundingBox(
            rpoint,
            Coordinate(
                rpoint.x + dx,
                rpoint.y + dy
            )
        )

    def scale(self, factor=1, return_bb=True):
        scaled_coords = (
            self.p1.x + self.delta_x * factor,
            self.p1.y + self.delta_y * factor
        )
        if return_bb:
            return BoundingBox(
                self.p1,
                Coordinate(*scaled_coords)
            )
        else:
            return scaled_coords

    def delta_hypot(self, length):
        # sin(0) = opp / hypot
        return BoundingBox(
            self.p1,
            Coordinate(
                self.p1.x + length * math.cos(math.radians(self.theta)),
                self.p1.y + length * math.sin(math.radians(self.theta))
            )
        )

    @property
    def center(self):
        """The center of the bounding box."""
        return (
            (self.p2.lon - self.p1.lon) / 2 + self.p1.lon,
            (self.p2.lat - self.p1.lat) / 2 + self.p1.lat,
        )

    @property
    def height(self):
        """
        The height of the bounding box in degrees. In essence, it is the
        absolute value of delta_y.
        """
        return abs(self.p2.lat - self.p1.lat)

    @property
    def width(self):
        """
        The width of the bounding box in degrees. In essence, it is the
        absolute value of delta_x.
        """
        return abs(self.p2.lon - self.p1.lon)

    @property
    def isvertical(self):
        """
        Returns True if the longitudes of the points of the bounding box are
        the same, implying a vertical or north/south oriented bbox or segment.
        """
        return self.p1.lon == self.p2.lon

    @property
    def slope(self):
        """
        Returns the dy/dx of the segment formed by the bounding box points.

        It will return None if the bounding box segment is vertical.
        """
        try:
            return (self.p2.lat - self.p1.lat) / (self.p2.lon - self.p1.lon)
        except:
            return None

    @property
    def b(self):
        """
        The "y-intercept" of the bounding-box segment. If the said segement is
        vertical, it will return None.
        """
        try:
            return self.p1.lat - self.slope * self.p1.lon
        except:
            return None

    @property
    def n(self):
        """The northern most extent (top) of the bounding box."""
        return max(self.p1.lat, self.p2.lat)

    @property
    def s(self):
        """The southern most extent (bottom) of the bounding box."""
        return min(self.p1.lat, self.p2.lat)

    @property
    def ns(self):
        """
        Tuple of the south/north (bottom and top) extents of the bounding box.
        """
        return (self.s, self.n)

    @property
    def e(self):
        """
        Eastern (right) most extent of the bounding box. This does not account
        for 180deg traversals.
        """
        return max(self.p1.lon, self.p2.lon)

    @property
    def w(self):
        """
        Western (left) most extent of the bounding box. This does not account
        for 180deg traversals.
        """
        return min(self.p1.lon, self.p2.lon)

    @property
    def ew(self):
        """
        Tuple of the west/east (left and right) extents of the bounding box.
        """
        return (self.w, self.e)

    @property
    def sw(self):
        """
        Coordinate of the southwest (bottom-left) point of the bounding box
        (lon, lat).
        """
        return (min([self.p1.lon, self.p2.lon]), min([self.p1.lat, self.p2.lat]))

    @property
    def se(self):
        """
        Coordinate of the southeast (bottom-right) point of the bounding box
        (lon, lat).
        """
        return (max([self.p1.lon, self.p2.lon]), min([self.p1.lat, self.p2.lat]))

    @property
    def ne(self):
        """
        Coordinate of the northeast (top-right) point of the bounding box
        (lon, lat).
        """
        return (max([self.p1.lon, self.p2.lon]), max([self.p1.lat, self.p2.lat]))

    @property
    def nw(self):
        """
        Coordinate of the northwest (top-left) point of the bounding box
        (lon, lat).
        """
        return (min([self.p1.lon, self.p2.lon]), max([self.p1.lat, self.p2.lat]))

class Hurdat2GIS:
    us_gulf_coast = [(-81.11, 25.138), (-81.365, 25.831), (-81.716, 25.983), (-82.715, 27.5), (-82.844, 27.846), (-82.664, 28.492), (-82.651, 28.887), (-83.279, 29.44), (-83.694, 29.926), (-84.044, 30.104), (-84.31, 30.065), (-84.383, 29.907), (-85.008, 29.607), (-85.376, 29.695), (-85.676, 30.122), (-86.454, 30.399), (-86.68, 30.403), (-87.476, 30.294), (-87.49, 30.378), (-87.622, 30.265), (-88.006, 30.231), (-88.135, 30.367), (-88.4, 30.371), (-88.692, 30.355), (-88.905, 30.415), (-89.224, 30.332), (-89.321, 30.345), (-89.443, 30.223), (-89.521, 30.193), (-89.401, 30.046), (-89.358, 29.921), (-89.354, 29.82), (-89.721, 29.619), (-89.514, 29.42), (-89.181, 29.336), (-89.016, 29.203), (-89.021, 29.143), (-89.156, 29.017), (-89.376, 28.981), (-89.443, 29.194), (-89.792, 29.333), (-90.053, 29.43), (-90.053, 29.337), (-90.118, 29.141), (-90.231, 29.103), (-90.302, 29.256), (-90.503, 29.3), (-90.678, 29.151), (-90.751, 29.131), (-91.29, 29.289), (-91.244, 29.457), (-91.565, 29.605), (-91.831, 29.486), (-92.084, 29.593), (-92.261, 29.557), (-92.688, 29.599), (-93.176, 29.779), (-93.388, 29.777), (-93.695, 29.77), (-93.826, 29.725), (-93.884, 29.81), (-93.794, 29.977), (-93.946, 29.815), (-93.89, 29.689), (-94.084, 29.673), (-94.775, 29.346), (-95.274, 28.964), (-95.853, 28.64), (-96.764, 28.153), (-97.061, 27.822), (-97.385, 27.243), (-97.351, 26.801), (-97.171, 26.159), (-97.14, 26.03), (-97.146, 25.961)]

    us_east_coast = [(-67.13, 45.138), (-66.987, 44.828), (-67.191, 44.676), (-68.057, 44.384), (-68.305, 44.257), (-69.068, 44.092), (-69.244, 43.975), (-69.526, 43.905), (-69.808, 43.775), (-70.203, 43.626), (-70.512, 43.341), (-70.642, 43.134), (-70.733, 43.07), (-70.806, 42.877), (-70.829, 42.825), (-70.604, 42.65), (-71.046, 42.331), (-70.738, 42.229), (-70.516, 41.798), (-70.021, 41.826), (-70.241, 42.091), (-70.109, 42.078), (-69.974, 41.966), (-69.949, 41.677), (-70.666, 41.527), (-70.666, 41.695), (-71.169, 41.489), (-71.234, 41.707), (-71.241, 41.492), (-71.523, 41.379), (-71.842, 41.336), (-72.925, 41.285), (-73.63, 40.992), (-73.987, 40.751), (-73.574, 40.92), (-72.625, 40.992), (-72.274, 41.153), (-71.903, 41.061), (-72.676, 40.791), (-73.229, 40.652), (-73.9, 40.571), (-74.015, 40.581), (-73.958, 40.328), (-74.08, 39.788), (-74.474, 39.343), (-74.794, 39.002), (-74.923, 38.941), (-75.413, 39.281), (-75.074, 38.775), (-75.038, 38.456), (-75.136, 38.181), (-75.226, 38.04), (-75.587, 37.559), (-75.812, 37.425), (-75.934, 37.152), (-75.966, 36.862), (-75.857, 36.551), (-75.758, 36.229), (-75.491, 35.746), (-75.456, 35.564), (-75.465, 35.449), (-75.544, 35.24), (-75.964, 35.119), (-76.504, 34.643), (-77.134, 34.708), (-77.65, 34.358), (-77.861, 34.149), (-77.928, 33.94), (-78.013, 33.912), (-78.406, 33.918), (-78.564, 33.877), (-78.92, 33.659), (-79.229, 33.185), (-79.941, 32.667), (-80.872, 32.03), (-81.258, 31.436), (-81.504, 30.731), (-81.368, 30.208), (-81.254, 29.806), (-80.889, 29.03), (-80.534, 28.479), (-80.581, 28.19), (-80.104, 27.059), (-80.048, 26.586), (-80.123, 25.83), (-80.328, 25.427), (-80.485, 25.23), (-80.737, 25.156), (-81.11, 25.138)]

    us_west_coast = [(-117.128, 32.533), (-117.137, 32.649), (-117.243, 32.664), (-117.271, 32.806), (-117.319, 33.1), (-117.467, 33.296), (-117.789, 33.538), (-118.081, 33.722), (-118.294, 33.712), (-118.41, 33.744), (-118.393, 33.858), (-118.506, 34.017), (-118.832, 34.024), (-119.236, 34.164), (-119.268, 34.257), (-119.606, 34.418), (-119.853, 34.412), (-120.053, 34.469), (-120.481, 34.472), (-120.645, 34.58), (-120.663, 34.949), (-120.634, 35.076), (-120.857, 35.21), (-121.284, 35.676), (-121.877, 36.331), (-121.919, 36.572), (-121.79, 36.732), (-121.881, 36.939), (-122.164, 36.991), (-122.395, 37.208), (-122.514, 37.772), (-123.001, 38.019), (-123.046, 38.305), (-123.701, 38.907), (-123.82, 39.368), (-123.833, 39.775), (-124.324, 40.252), (-124.372, 40.491), (-124.072, 41.46), (-124.54, 42.813), (-124.149, 43.692), (-123.929, 45.577), (-124.113, 46.863), (-124.46, 47.784), (-124.621, 47.904), (-124.71, 48.38), (-123.976, 48.168), (-122.779, 48.138), (-122.657, 48.49), (-122.789, 48.993)]

    mexico_east_coast = [(-97.146, 25.961), (-97.164, 25.755), (-97.225, 25.585), (-97.424, 25.233), (-97.668, 24.39), (-97.766, 23.306), (-97.758, 22.886), (-97.858, 22.625), (-97.763, 22.106), (-97.315, 21.564), (-97.396, 21.187), (-97.186, 20.717), (-96.456, 19.87), (-96.368, 19.567), (-96.29, 19.344), (-95.985, 19.054), (-95.913, 18.897), (-95.561, 18.719), (-95.182, 18.701), (-94.798, 18.515), (-94.546, 18.175), (-94.189, 18.195), (-93.552, 18.43), (-92.71, 18.612), (-91.974, 18.716), (-91.437, 18.89), (-90.739, 19.352), (-90.693, 19.73), (-90.492, 19.947), (-90.353, 21.009), (-88.132, 21.616), (-87.128, 21.621), (-86.824, 21.422), (-86.772, 21.151), (-86.926, 20.786), (-87.421, 20.231), (-87.435, 19.502), (-87.853, 18.269), (-88.039, 18.484), (-88.296, 18.472)]

    mexico_west_coast = [(-92.235, 14.545), (-93.734, 15.888), (-94.471, 16.187), (-95.134, 16.177), (-95.464, 15.975), (-96.511, 15.652), (-97.755, 15.967), (-98.762, 16.535), (-99.691, 16.72), (-101.002, 17.276), (-101.6, 17.652), (-101.919, 17.96), (-102.7, 18.063), (-103.442, 18.325), (-103.912, 18.828), (-104.405, 19.091), (-104.938, 19.309), (-105.669, 20.386), (-105.245, 20.634), (-105.492, 20.777), (-105.237, 21.119), (-105.209, 21.491), (-105.431, 21.618), (-105.649, 21.988), (-105.646, 22.327), (-105.792, 22.627), (-107.085, 24.016), (-107.951, 24.615), (-108.281, 25.082), (-109.385, 25.727), (-109.426, 26.033), (-109.2, 26.305), (-109.483, 26.71), (-109.755, 26.703), (-109.944, 27.079), (-110.478, 27.323), (-110.615, 27.654), (-110.53, 27.864), (-111.121, 27.967), (-111.472, 28.384), (-112.162, 29.019), (-112.278, 28.769), (-112.514, 28.848), (-112.47, 29.168), (-112.378, 29.348), (-112.415, 29.536), (-112.738, 29.985), (-112.825, 30.3), (-113.058, 30.651), (-113.119, 31.048), (-113.047, 31.179), (-113.623, 31.346), (-113.633, 31.468), (-113.948, 31.629), (-114.003, 31.525), (-114.694, 31.706), (-114.848, 31.538), (-114.882, 31.156), (-114.761, 30.959), (-114.633, 30.507), (-114.65, 30.238), (-114.373, 29.83), (-113.755, 29.367), (-113.206, 28.799), (-113.094, 28.512), (-112.871, 28.424), (-112.734, 27.826), (-112.329, 27.523), (-112.191, 27.187), (-112.004, 27.079), (-111.57, 26.708), (-111.332, 26.125), (-111.292, 25.79), (-111.034, 25.527), (-110.894, 25.144), (-110.687, 24.868), (-110.729, 24.672), (-110.659, 24.341), (-110.421, 24.183), (-110.367, 24.1), (-110.304, 24.339), (-110.023, 24.175), (-109.711, 23.804), (-109.421, 23.48), (-109.458, 23.215), (-109.728, 22.982), (-110.006, 22.894), (-110.086, 23.005), (-110.181, 23.342), (-110.363, 23.605), (-111.419, 24.329), (-111.712, 24.346), (-112.297, 24.79), (-112.07, 25.573), (-112.377, 26.214), (-112.658, 26.317), (-113.021, 26.583), (-113.156, 26.946), (-113.272, 26.791), (-113.599, 26.721), (-113.841, 26.967), (-114.445, 27.218), (-115.036, 27.842), (-114.57, 27.784), (-114.266, 27.934), (-114.048, 28.426), (-114.937, 29.352), (-115.674, 29.756), (-116.662, 31.565), (-117.128, 32.533)]

    centam_east_coast = [(-88.296, 18.472), (-88.349, 18.359), (-88.13, 18.351), (-88.085, 18.226), (-88.272, 17.61), (-88.262, 16.963), (-88.313, 16.633), (-88.562, 16.29), (-88.695, 16.248), (-88.912, 15.956), (-88.594, 15.95), (-88.131, 15.701), (-87.875, 15.879), (-87.618, 15.91), (-87.487, 15.79), (-86.907, 15.762), (-86.357, 15.783), (-85.986, 16.024), (-85.484, 15.9), (-84.974, 15.99), (-84.261, 15.823), (-83.775, 15.437), (-83.369, 15.24), (-83.291, 15.079), (-83.158, 14.993), (-83.302, 14.802), (-83.188, 14.34), (-83.412, 13.996), (-83.567, 13.32), (-83.514, 12.944), (-83.541, 12.596), (-83.511, 12.412), (-83.651, 12.287), (-83.68, 12.024), (-83.769, 11.932), (-83.705, 11.825), (-83.652, 11.642), (-83.829, 11.428), (-83.868, 11.3), (-83.832, 11.131), (-83.714, 10.934), (-83.642, 10.917), (-83.448, 10.466), (-83.125, 10.042), (-83.029, 9.991), (-82.778, 9.67), (-82.564, 9.577), (-82.371, 9.429), (-82.259, 9.43), (-82.233, 9.381), (-82.244, 9.334), (-82.363, 9.382), (-82.375, 9.337), (-82.34, 9.209), (-82.205, 9.215), (-82.188, 9.192), (-82.235, 9.142), (-82.244, 9.031), (-82.078, 8.935), (-81.78, 8.957), (-81.894, 9.14), (-81.712, 9.019), (-81.546, 8.827), (-81.204, 8.787), (-80.839, 8.887), (-80.676, 9.022), (-80.127, 9.21), (-79.978, 9.344), (-79.855, 9.378), (-79.577, 9.598), (-79.017, 9.51), (-78.932, 9.428), (-78.504, 9.406), (-78.083, 9.236), (-77.831, 9.068), (-77.697, 8.889), (-77.374, 8.658)]

    centam_west_coast = [(-77.901, 7.229), (-78.17, 7.544), (-78.422, 8.061), (-78.255, 8.139), (-78.281, 8.248), (-78.469, 8.447), (-78.514, 8.628), (-78.848, 8.842), (-79.086, 8.997), (-79.442, 9.006), (-79.687, 8.851), (-79.816, 8.639), (-79.75, 8.596), (-80.459, 8.214), (-80.458, 8.077), (-80.075, 7.667), (-80.011, 7.5), (-80.439, 7.275), (-80.846, 7.22), (-81.064, 7.9), (-81.219, 7.621), (-81.504, 7.721), (-81.728, 8.138), (-82.16, 8.195), (-82.68, 8.322), (-82.879, 8.071), (-83.123, 8.353), (-83.544, 8.446), (-83.734, 8.614), (-83.614, 8.804), (-83.737, 9.15), (-84.222, 9.463), (-84.582, 9.568), (-84.715, 9.899), (-85.115, 9.582), (-85.315, 9.811), (-85.625, 9.902), (-85.85, 10.292), (-85.663, 10.635), (-85.667, 10.745), (-85.908, 10.898), (-85.744, 11.062), (-85.961, 11.331), (-86.469, 11.738), (-86.756, 12.157), (-87.125, 12.434), (-87.46, 12.758), (-87.668, 12.904), (-87.585, 13.043), (-87.337, 12.979), (-87.489, 13.353), (-87.814, 13.399), (-87.931, 13.181), (-88.512, 13.184), (-88.867, 13.283), (-89.278, 13.478), (-89.804, 13.56), (-90.095, 13.737), (-90.562, 13.927), (-91.146, 13.926), (-91.641, 14.115), (-92.235, 14.545)]

    cuba_coast = [(-74.137, 20.232), (-74.154, 20.169), (-74.253, 20.08), (-74.635, 20.058), (-75.003, 19.929), (-75.116, 19.901), (-75.152, 20.008), (-75.219, 19.924), (-75.29, 19.893), (-75.552, 19.891), (-75.765, 19.96), (-76.158, 19.99), (-76.78, 19.94), (-76.999, 19.893), (-77.212, 19.894), (-77.715, 19.855), (-77.554, 20.082), (-77.104, 20.408), (-77.205, 20.611), (-77.997, 20.715), (-78.491, 21.054), (-78.636, 21.516), (-79.189, 21.553), (-80.231, 21.872), (-80.485, 22.087), (-80.962, 22.053), (-81.083, 22.098), (-81.185, 22.268), (-81.222, 22.143), (-81.355, 22.104), (-81.441, 22.184), (-81.816, 22.2), (-82.078, 22.388), (-81.683, 22.535), (-81.839, 22.672), (-82.738, 22.689), (-83.38, 22.223), (-83.486, 22.187), (-83.901, 22.17), (-84.031, 21.943), (-84.241, 21.898), (-84.503, 21.776), (-84.501, 21.93), (-84.838, 21.828), (-84.887, 21.857), (-84.877, 21.894), (-84.494, 22.042), (-84.326, 22.074), (-84.383, 22.256), (-84.361, 22.379), (-84.045, 22.666), (-83.258, 22.968), (-82.666, 23.044), (-82.101, 23.19), (-81.575, 23.117), (-81.364, 23.13), (-81.262, 23.157), (-81.179, 23.06), (-80.65, 23.103), (-80.55, 23.017), (-80.365, 22.943), (-80.075, 22.942), (-79.924, 22.869), (-79.82, 22.887), (-79.851, 22.827), (-79.677, 22.743), (-79.549, 22.578), (-79.276, 22.408), (-78.835, 22.391), (-78.686, 22.367), (-78.143, 22.109), (-77.865, 21.901), (-77.545, 21.775), (-77.583, 21.889), (-77.497, 21.872), (-77.3, 21.712), (-77.144, 21.644), (-77.099, 21.589), (-76.836, 21.4), (-76.726, 21.359), (-76.647, 21.285), (-76.455, 21.274), (-76.259, 21.227), (-76.074, 21.133), (-75.723, 21.111), (-75.634, 21.061), (-75.596, 20.995), (-75.663, 20.898), (-75.597, 20.838), (-75.74, 20.812), (-75.725, 20.715), (-75.643, 20.733), (-75.338, 20.702), (-75.213, 20.714), (-74.883, 20.651), (-74.662, 20.522), (-74.513, 20.385), (-74.384, 20.33), (-74.234, 20.326), (-74.167, 20.292), (-74.137, 20.232)]

    jamaica_coast = [(-76.211, 17.914), (-76.525, 17.866), (-76.853, 17.974), (-76.944, 17.849), (-77.071, 17.901), (-77.205, 17.715), (-77.464, 17.856), (-77.768, 17.877), (-78.044, 18.174), (-78.294, 18.218), (-78.34, 18.287), (-78.217, 18.448), (-77.978, 18.468), (-77.873, 18.522), (-77.354, 18.466), (-76.908, 18.39), (-76.35, 18.152), (-76.211, 17.914)]

    hispaniola_coast = [(-71.768, 18.039), (-72.06, 18.229), (-72.592, 18.187), (-72.877, 18.152), (-73.385, 18.251), (-73.747, 18.19), (-73.839, 18.058), (-73.885, 18.042), (-74.085, 18.215), (-74.419, 18.346), (-74.478, 18.45), (-74.388, 18.625), (-74.228, 18.663), (-72.739, 18.442), (-72.376, 18.574), (-72.348, 18.675), (-72.811, 19.072), (-72.703, 19.441), (-73.053, 19.611), (-73.396, 19.659), (-73.438, 19.722), (-73.401, 19.807), (-73.315, 19.855), (-72.877, 19.928), (-72.637, 19.901), (-72.22, 19.745), (-71.835, 19.697), (-71.779, 19.718), (-71.779, 19.718), (-71.735, 19.735), (-71.667, 19.849), (-71.442, 19.894), (-71.281, 19.847), (-70.954, 19.914), (-70.129, 19.636), (-69.957, 19.672), (-69.891, 19.59), (-69.739, 19.299), (-69.325, 19.328), (-69.232, 19.272), (-69.323, 19.201), (-69.624, 19.118), (-68.685, 18.905), (-68.339, 18.612), (-68.493, 18.379), (-68.687, 18.215), (-68.935, 18.408), (-69.275, 18.44), (-69.771, 18.444), (-70.018, 18.374), (-70.183, 18.252), (-70.48, 18.217), (-70.645, 18.336), (-71.07, 18.25), (-71.083, 18.128), (-71.396, 17.646), (-71.439, 17.636), (-71.658, 17.821), (-71.674, 17.954), (-71.768, 18.039)]

    puerto_rico_coast = [(-65.621, 18.242), (-65.782, 18.129), (-65.834, 18.057), (-65.971, 17.974), (-66.135, 17.949), (-66.286, 17.95), (-66.409, 17.951), (-66.511, 17.987), (-66.598, 17.978), (-66.772, 17.987), (-66.838, 17.955), (-67.013, 17.968), (-67.142, 17.967), (-67.197, 17.994), (-67.172, 18.224), (-67.264, 18.365), (-67.172, 18.436), (-67.159, 18.499), (-67.06, 18.522), (-66.813, 18.493), (-66.093, 18.469), (-65.879, 18.444), (-65.756, 18.402), (-65.629, 18.381), (-65.621, 18.242)]

    bermuda_coast = [(-64.676, 32.389), (-64.679, 32.377), (-64.704, 32.355), (-64.705, 32.338), (-64.741, 32.3), (-64.768, 32.289), (-64.795, 32.269), (-64.81, 32.265), (-64.837, 32.265), (-64.849, 32.267), (-64.86, 32.273), (-64.781, 32.288), (-64.792, 32.3), (-64.751, 32.314), (-64.697, 32.374), (-64.676, 32.389)]
